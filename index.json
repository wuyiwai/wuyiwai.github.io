[{"authors":null,"categories":null,"content":"资源 ZeoSeven Fonts - 免费商用字体网站 golang全栈指南 发现和探索优质的 MCP 服务器 中国区 GitHub 用户排行榜 Free for Developers - 专门为开发者收集整理免费在线工具资源的网站 - 独立开发者 大厂的用户网络诊断网页合集 一个拍人像拍得非常好的博主莫梦醒 工具 flowdown - ai客户端工具 wis - 查询域名信息的工具 github.cards - 漂亮的github个人主页生成器 网站地图生成器 - 好用 MTranServer - 一个超低资源消耗超快的离线翻译服务器 NotionNext - 使用 NextJS + Notion API 实现的，支持多种部署方案的静态博客 - 博客 Corey Chiu - 一个比较适合展示独立开发者作品的博客主题 - 博客 wxt.dev - 浏览器扩展开发框架 - chrome扩展 Toptimeline - 探索世界最著名的流行歌手、运动员和历史人物的关键事件与个人里程碑 Link3 - 数字名片工具 linktree - 数字名片工具 muselink - 极简数字名片工具 XiaoMusic: 无限听歌，解放小爱音箱 - IOT Azure TTS Importer - 轻松将 Azure TTS 语音合成服务导入阅读软件 - tts 纸由我 PaperMe - 自定义纸张设计工具 文章 Azure Database for PostgreSQL Blog - Azure关于Pg优化的博客 轻松阅读英文内容-终极翻译工具和插件推荐 橙红教小白如何选相机 - 摄影 书 软件工程中解决问题的艺术：如何让 MySQL 变得更好 跟我一起写Makefile 国际化设计指南 中文量化百科 认知偏差知识手册 ","date":1742256e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"f5be930b3453f633c5014170a55e7003","permalink":"https://wuyiwai.github.io/post/2025%E5%B9%B43%E6%9C%88/","publishdate":"2025-03-18T00:00:00Z","relpermalink":"/post/2025%E5%B9%B43%E6%9C%88/","section":"post","summary":"汇总了2025年3月的一些有趣的项目","tags":["技术月刊","生活"],"title":"2025年3月","type":"post"},{"authors":null,"categories":null,"content":" 注意: 白发逆转需3-6个月观察期\n总结：\n复合维生素B族比较重要 早餐：冰泉黑豆豆浆粉 晚餐：牛肉、鸡胸肉、鸡蛋、猪肝、菠菜 零食：每日坚果包 补剂：维B、维C、维E、锌 饮料：绿茶 水果： 蓝莓：每日100g，搭配酸奶更佳 桑葚：干品每日20g，泡茶或煮粥，避免过量以免腹泻 营养补充 摄入酪氨酸 鸡胸肉、鸡蛋、金枪鱼罐头 黑豆、豆腐、核桃 即食鸡胸肉丸、豆干、每日坚果包 矿物质 铜：牡蛎、腰果、猪肝 铁：鸭血、牛肉、菠菜 锌：牡蛎、南瓜籽、鹰嘴豆 硒：巴西坚果、带鱼、芦笋 维生素 B族维生素（尤其是B12）：每日补充2.4μg：全麦面包、酸奶、螺旋藻片 维生素C：猕猴桃、鲜榨橙汁、西兰花 维生素E：杏仁、葵花籽油、猕猴桃 饮食调理 花青素：蓝莓、紫薯、黑枸杞 多酚类：绿茶、无糖黑巧克力、石榴 类胡萝卜素：胡萝卜、南瓜、红薯 补充剂 复合维生素B片：选择含B12（甲钴胺）的配方，适合长期熬夜、压力大人群。 维生素C泡腾片：方便携带，注意选择无糖或低糖版本。 天然维生素E胶囊：建议选择d-α生育酚形式，每日剂量不超过200mg。 酪氨酸片：适合素食者或饮食摄入不足者，建议随餐服用。 锌+硒合剂：选择有机锌（如葡萄糖酸锌）和硒代蛋氨酸形式，减少肠胃刺激。 花青素提取物：优先选择黑枸杞或蓝莓提取物，注意标签注明花青素含量。 辅酶Q10（每日100-200mg） 谷胱甘肽（需医生指导） 中医 黑芝麻：每天30g打粉冲服 黑豆：浸泡后打豆浆 桑椹：干品15g煮水 ","date":1741996800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"924866c43e0b3627f82733c0848b7c47","permalink":"https://wuyiwai.github.io/post/%E6%B2%BB%E7%96%97%E7%99%BD%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8E%AA%E6%96%BD/","publishdate":"2025-03-15T00:00:00Z","relpermalink":"/post/%E6%B2%BB%E7%96%97%E7%99%BD%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8E%AA%E6%96%BD/","section":"post","summary":"治疗白发的一些建议和措施，主要注重休息和可操作的食源性补充","tags":["养生"],"title":"治疗白发的一些措施","type":"post"},{"authors":null,"categories":null,"content":" 项目 备注 标签 天气时钟、小电视 ESP8266 小智AI聊天机器人 ESP32 ","date":1740614400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"befb5ed5a9b852eb2420de7589548ac5","permalink":"https://wuyiwai.github.io/post/iot%E9%A1%B9%E7%9B%AE/","publishdate":"2025-02-27T00:00:00Z","relpermalink":"/post/iot%E9%A1%B9%E7%9B%AE/","section":"post","summary":"记录一些IOT项目慢慢尝试","tags":["IOT"],"title":"IOT项目","type":"post"},{"authors":null,"categories":null,"content":"部署目的及机器选择 目的：部署个人网站、个人项目（以下的所有配置选项都是基于该目的） 机器选择： 服务器类型：ECS(弹性计算服务)：适合个人项目、博客网站和智能家居项目 地域和可用区：选择离你用户群体最近的地域，一般在中国主要选择华东1（杭州）**或华北2（北京） CPU和内存：1核2G或者2核4G即可 存储：40-100G绰绰有余 操作系统： aliyun发行版（不想多思考可以选这个） 如果想做智能家居项目，运行一些特定的物联网框架（如Home Assistant、Node-RED等），建议选择 Ubuntu 或 Debian，这些可能支持更好一点 不推荐选择LTS版本或者已经停止维护的发行版 带宽：固定带宽 + （1Mbps到5Mbps），注意：99元套餐3Mbps也够用了 安全组：配置安全组规则，确保只开放必要的端口（如HTTP 80、HTTPS 443、SSH 22）等 云监控：记得开，监控内存和cpu等，还可以配置告警规则 ssl证书：免费的也能用 DDoS：启用DDoS防护服务 配置远程登录 建议：使用ssh登录，禁用密码登录\n在本地先生成ssh秘钥 ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; 默认会保存在 ~/.ssh/id_rsa,其中 id_rsa 是私钥(不要分享给别人),id_rsa.pub是公钥\n将公钥上传到阿里云ECS实例 登录阿里云控制台 进入ECS管理台 找到你的 ECS 实例，点击实例名称进入详情页 在左侧菜单中，点击 本实例密钥对 点击 绑定密钥对，选择 使用已有密钥对 或 创建新密钥对 选择 使用已有密钥对，将你的公钥内容（id_rsa.pub 文件内容）粘贴到输入框中 点击 确定，完成绑定 配置本地SSH登录 在本地配置了iterm2+zsh的情况下：\nvim ~/.zshrc # 添加以下内容 ssh-add /Users/username/.ssh/aliyun_rsa alias aliyun=\u0026#39;ssh root@your_server_ip\u0026#39; source ~/.zshrc 接下来就可以用 aliyun 这个命令直接直接连接机器了\n配置Nginx + PHP + Mysql 更新软件 sudo yum update -y 配置nginx $ sudo yum install nginx -y $ sudo systemctl start nginx // 启动nginx $ sudo systemctl enable nginx // 设置为开机启动 编辑nginx配置文件\n$ sudo vim /etc/nginx/conf.d/wordpress.conf 例子：\nserver { listen 80; server_name {your_domain}; # 改为你的域名或IP client_max_body_size 10M; // 单次请求的最大配置 root /var/www/{your_blog_name}; # 改为你的博客目录 index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { include fastcgi_params; fastcgi_pass 127.0.0.1:9000; // 这里要注意，用什么fastcgi取决于php.ini里面listen的配置 fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; } location ~ /\\.ht { deny all; } } # 检查nginx配置文件是否正确 $ sudo nginx -t # 重启nginx $ sudo systemctl restart nginx 访问服务 http://{your_domain} 配置数据库 # 安装mysql $ sudo yum install mysql-server -y $ sudo systemctl start mysqld $ sudo systemctl enable mysqld $ sudo mysql_secure_installation // 这一步开始交互式配置数据库密码 # 配置数据库 $ sudo mysql -u root -p // 以root账户进行登录 $ \u0026gt; CREATE DATABASE wordpress; 创建wordpress用户 $ \u0026gt; CREATE USER \u0026#39;{your_username}\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;{your_password}\u0026#39;; $ \u0026gt; GRANT ALL PRIVILEGES ON wordpress.* TO \u0026#39;{your_username}\u0026#39;@\u0026#39;localhost\u0026#39;; $ \u0026gt; FLUSH PRIVILEGES; // 刷新权限 $ \u0026gt; EXIT; 注意： - 这里的{your_username}是额外创建给wordpress这个应用的用户，主要用来隔离数据库权限的，可以修改成自己想要的用户名 - \u0026#39;{your_username}\u0026#39;@\u0026#39;localhost\u0026#39;这里的单引号一个都别省略，语法就是这样的，localhost这里要特别注意，如果是单纯在内网访问，可以只给一个localhost就可以了,如果想用datagrip或者navicat这样的管理工具远程访问，可以额外创建一个\u0026#39;{your_username}\u0026#39;@\u0026#39;xxx.xxx.xxx.xxx\u0026#39;这样user用来给特定ip进行访问 - {your_password}就填你想要的密码 - grant语句里的wordpress.*指的是wordpress数据库的*,如果想所有数据库都对这个用户开放的话，就写*.* 特别注意：\n要用datagrip这样的管理工具去管理数据库，就要用到远程连接，记得要开放对应的远程端口，如果只是自己用，可以配置开放特定ip 阿里云对特定ip开放特定端口白名单 打开阿里云ECS控制台,找到你需要配置的 ECS 实例，点击实例名称进入详情页 在实例详情页的左侧菜单中，点击 安全组,找到当前实例绑定的安全组，点击安全组 ID 进入安全组详情页 在安全组详情页，点击 配置规则，选择 入方向 标签页，点击 手动添加， 填写以下信息： 授权策略：允许。 协议类型：MySQL（3306）。 端口范围：3306/3306。 优先级：1（数字越小，优先级越高）。 授权类型：IPv4 地址段访问。 授权对象：填写你需要允许的特定 IP 地址。例如： 如果只允许单个 IP，填写 x.x.x.x/32（例如 192.168.1.100/32）。 如果允许一个 IP 段，填写 x.x.x.x/24（例如 192.168.1.0/24）。 安装php $ sudo yum install epel-release -y $ sudo yum install https://rpms.remirepo.net/enterprise/remi-release-7.rpm -y $ sudo yum install yum-utils -y $ sudo yum-config-manager --enable remi-php81 $ sudo yum install php php-mysqlnd php-gd php-xml php-mbstring php-json -y $ php -v //验证php是否安装成功 $ sudo yum install php-fpm -y // 安装php-fpm # 启动 PHP-FPM 并设置开机自启动： $ sudo systemctl start php-fpm $ sudo systemctl enable php-fpm # 验证 PHP-FPM 是否正常运行： $ sudo systemctl status php-fpm 安装wordpress # 下载wordpress $ cd /var/www $ sudo wget https://cn.wordpress.org/wordpress-6.7.1-zh_CN.tar.gz # 解压wordpress $ sudo tar -xvzf latest.tar.gz # 重命名wordpress目录（可选） $ sudo mv wordpress your_blog_name // 最后一个参数是自己的博客名 # 设置wordpress权限 $ sudo chmod -R 755 /var/www/your_blog_name $ sudo chown -R nginx:nginx /var/www/wordpress (可选：这里要注意启动nginx的linux用户和用户组是哪个，这里保持跟nginx的一致就行，如果启动nginx的是root用户，就不要动) # 配置 WordPress** $ cd /var/www/your_blog_name $ sudo cp wp-config-sample.php wp-config.php $ sudo vim wp-config.php // 改一下DB_NAME、DB_USER、DB_PASSWORD就可以了 \u0026gt; define(\u0026#39;DB_NAME\u0026#39;, \u0026#39;wordpress\u0026#39;); // 这个是刚刚在mysql创建的wordpress数据库名 \u0026gt; define(\u0026#39;DB_USER\u0026#39;, \u0026#39;{your_username}\u0026#39;); // 这个就是刚刚在mysql创建的给wordpress用的用户名 \u0026gt; define(\u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;{your_password}\u0026#39;); \u0026gt; define(\u0026#39;DB_HOST\u0026#39;, \u0026#39;localhost\u0026#39;); wordpress的一些其他踩坑点 上传主题时 或 健康检查没有写入权限 原因是用户组没有配置对，检查用户和用户组具备755权限\n单次请求上传提示文件过大 Nginx：设置 client_max_body_size 100M; PHP：调整 upload_max_filesize 和 post_max_size 修改wordpress根目录的wp-config.php配置: define(\u0026#39;WP_MEMORY_LIMIT\u0026#39;, \u0026#39;256M\u0026#39;); 一些定位方法: 查看nginx报错日志： $ tail -f /var/log/nginx/error.log ","date":1739232e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"a3c1aceaa999393c3f0f67be781548c7","permalink":"https://wuyiwai.github.io/post/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%BA%E5%99%A8%E9%83%A8%E7%BD%B2wordpress/","publishdate":"2025-02-11T00:00:00Z","relpermalink":"/post/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%BA%E5%99%A8%E9%83%A8%E7%BD%B2wordpress/","section":"post","summary":"记录了用阿里云机器部署wordpress、typecho的详细过程","tags":["技术","博客","linux"],"title":"阿里云机器部署wordpress、typecho记录","type":"post"},{"authors":null,"categories":null,"content":"购物 参考来源： https://yyjingyan.com/index.php/archives/448/\n买油执行标准区别\n推荐标准：GB/T 2716（调和油）、GB/T 1534（花生油）、GB/T 1535（大豆油）、GB/T 1536（菜籽油）、GB/T 19111（玉米油）、GB/T 10464（葵花籽油）。 买米执行标准区别\n推荐标准：GB/T 1354（普通大米）、GB/T 19266（五常大米）、GB/T 18824（盘锦大米）、GB/T 20040（方正大米）、GB/T 22438（原阳大米）。\n普通米：四位数为普通米，五位数为优质米。 买口罩执行标准\n医药行业标准：YY0469、YY/T0969。\n洗衣液标准：QB/T 1224。 买牙膏执行标准\n牙齿发黄：水合硅石成分。\n抑菌减轻炎症：生育酚乙酸酯、丁香酚。\n敏感牙齿：硝酸钾和锶盐。\n增白：焦磷酸盐。\n口腔溃疡：避免月桂醇硫酸酯钠（SLS）。\n建议：三个月换一次不同功效的牙膏，避免细菌耐药性。 买卫生巾标准\n不能买：香味款（含防腐剂）、清凉款（痛上加痛）、原料中有绒毛浆（大部分为二次回收）。\n可以买：执行标准编码 GB15979、GBT8939。 买酒执行标准\n推荐标准：GB/T 26760-2011（酱香型）、GB/T 10781.1-2006（浓香型）、GB/T 10781.2-2006（清香型）、GB/T 10781.3-2006（米香型）、GB/T 26761（小曲固态发酵）、GB/T 20822（固液法）、GB/T 20821-2007（液态法）。\n检验法：GB107 为标准，GB208 为酒精勾兑（茅台除外）。 买水果标准\n苹果：买表面有条纹的，不买带点的。\n芒果：买瘦的，不买胖的。\n菠萝：买矮胖的，不要瘦长的。\n榴莲：买圆的，不买长的。\n西瓜：买瓜屁股眼小的，不买眼大的。\n橙子：买母不买公（眼为肚脐状）。\n火龙果：买胖不买瘦。\n香蕉：带芝麻点的（更甜）。 买火腿肠标准\n无淀粉火腿肠：淀粉含量≤1%，口感最好。\n特级火腿肠：淀粉含量≤6%。\n优秀火腿：淀粉含量≤8%。\n普通火腿：淀粉含量≤10%。\n国家标准：GB/T 20712。\n行业标准：GB/T 10279。\n建议：选择钠含量低的。 脚臭怎么办\n方法：每天用盆洗脚，倒入 20ml 碘伏，泡 10 分钟，泡完脚后把鞋垫和袜子也放入盆中泡一泡，换双新鞋垫，把甲硝唑研成末放在鞋垫上，坚持一周脚不臭。 买洗衣液执行标准\n标准：GB/T 1224，活性物含量达到推荐标准，有效除污渍，还可以香香的。 购买纸巾注意\n高版本：原生木浆（家用餐巾纸）。\n中版本：原生浆或纯木浆（一般）。\n最低版本：混合浆（最低版）。 生活 口臭、牙齿牙龈口舌生疮 买 氯己定含漱液 漱口 - 参考 好吃的大米 - 参考 金龙鱼乳玉皇妃的五常大米，黄色和蓝色包装的都可以试试，三四块钱一斤 南梗 46、南梗 9108、南梗 5055，这三个品种都很好吃，三四块钱一斤 龙洋 16，和五常稻花香基本一个味儿，五块多一斤 马桶买全釉的 - 不然容易冲不干净 冬天冻伤冻疮，买康复新液 体检套餐 全套 B 超（腹部 \u0026amp; 甲状腺 \u0026amp; 可选动脉斑块） 肺部低剂量螺旋 CT 血常规 血糖血脂胆固醇 肝功能（可选）甲功 5 项 / 7 项（可选，沿海地区建议必选） 碳 13/14 （幽门螺旋杆菌） 大小便常规 + 肿瘤标志物检查（可选，有家族史必选） 眼科、心电图 肺部结节变化情况 如果是女性，加测分泌物检查 HPV TCT 乳腺彩超子宫附件彩超 ","date":1738886400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"b15c2aead4e0485a36a5361ee37ec26f","permalink":"https://wuyiwai.github.io/post/%E6%9C%89%E7%94%A8%E7%9A%84%E7%BB%8F%E9%AA%8C/","publishdate":"2025-02-07T00:00:00Z","relpermalink":"/post/%E6%9C%89%E7%94%A8%E7%9A%84%E7%BB%8F%E9%AA%8C/","section":"post","summary":"记录一些有用的经验","tags":["生活"],"title":"有用的经验","type":"post"},{"authors":null,"categories":null,"content":"资源 独立开发者出海工具收集站 平替应用列表 - 应用 一个资料比较全的嵌入式网站 - 树莓派 小爱同学无限听歌 - 智能家居 工具 Flyby11 - Windows 11 升级助手。这是一款开源的 Windows 11 升级辅助工具。它能够帮助用户绕过硬件限制，将 Windows 11 最新版本，安装到官方不支持的旧设备上。 note-gen - 一个UI比较原生好看的笔记工具 Bili23-Downloader-GUI - 又一个B站下载工具 pagecms - 一个静态网站的内容管理系统 handy-ollama - 动手学 Ollama 教程，轻松上手实现大模型本地化部署 domain-helper - 是一款功能强大的域名、SSL 证书管理工具，集成在 uTools 平台中 魔方复原基础教程 - 零基础入门 B站工具集 - 收集一些让我们在使用 B 站时更加方便的浏览器扩展 / 脚本 / 程序. yutto - B站视频下载工具 书源、图源、订阅源、规则、直播源、各种源 大型整合 cusor规则集合 Suppr 超能文献 - 文献搜索工具 萤火虫 - 专注于安卓玩机和分享资源 firebox - 英雄联盟助手 英雄联盟工具集 动漫取景地标注 Githubhunt - AI 驱动的 GitHub 仓库智能搜索引擎 懒人客服：基于大模型的智能对话客服工具 tradingview - 全球金融市场的实时数据和分析 文章 deepseek企业级部署 iterm2设置同步 海外工作党的英语学习经验 产品需求文档写作指南 从进程到协程：计算机的并发编程之路 零基础入门：如何用 RAG (检索增强生成) 打造知识库 QA 系统 五险一金 - 相关知识 书|教程 雅思讲解、资料、备考 从0开始学习英语语法 中文量化百科 Go by Example 中文版 不枯燥的音乐理论 ","date":1738368e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"b0791f18af060e99ed0b00ff6db5e567","permalink":"https://wuyiwai.github.io/post/2025%E5%B9%B42%E6%9C%88/","publishdate":"2025-02-01T00:00:00Z","relpermalink":"/post/2025%E5%B9%B42%E6%9C%88/","section":"post","summary":"汇总了2025年2月的一些有趣的项目","tags":["技术月刊","生活"],"title":"2025年2月","type":"post"},{"authors":null,"categories":null,"content":"应用、工具 cobalt - 可以免费下载几乎所有网站的视频、音频、照片或 gif，无需登录，非常好用 Olares - 一个开源的 NAS 系统，生态丰富，集成了很多能力 sourcegit - 好用的git gui客户端 PDFMathTranslate - 基于 AI 完整保留排版的 PDF 文档全文双语翻译 hoarder - 可以自部署的收藏应用 BabelDuck - 一个面向各水平层次语言学习者的高度可定制化 AI 口语对话练习应用 Redeem Hub - 一个开源的兑换码分发平台 NeoHtop - 系统监控工具 NeoHtop 做得挺美观的 mac vcard-personal-portfolio - 个人主页展示项目 浏览器插件 - B站空降助手 - 如其名，跳过不喜欢的部分 图拉丁吧工具箱 - DIY 爱好者的必备工具合集 MuseScore -一款免费开源的写谱工具 - 作曲 壹印 - 这是一个直接生成图片印框的工具 - 开源、摄影 心绪日记 - 是一个由 Flutter 构建的开源跨平台日记应用 Windows 平台上的开源 Ark 工具 WiFiAnalyzer - 开源的安卓wifi信号分析app builddg - 交互式的 Dockerfile 调试工具 oha - Rust 驱动的 HTTP 压测工具 iCloud Photos Downloader - iCloud 照片下载工具，适合用于 iCloud 照片迁移和备份等场景 ab-download-manager- 开源的桌面下载工具 Prism Launcher - 开源的Minecraft 的自定义启动器，可让您轻松管理 Minecraft 的多个安装 kyanos - 一个网络流量采集和分析工具 frame0.app - 手绘风格原型设计工具 openalternative.co - 开源替代工具查找 pdf-extract-api - 使用 OCR 技术和 Ollama 支持的模型提供 PDF 和图片的提取和解析 API，可以把 PDF 和图片转换为结构化的 JSON 或 Markdown 格式 certimate- 开源的 SSL 证书管理工具 zhale - 网络拨测工具 ICP域名备案查询 ab-download-manager - 下载管理器 Firebox 英雄联盟助手 Bili Audio Downloader - b 站视频下载工具 frame0 - 快速用线条绘制原型图 markmap - 将 Markdown 转换成思维导图的工具，适用于笔记整理、知识管理、项目规划等多种场景。 开源许可证选择器 100 个句子记完 7000 个雅思单词 chardb - 类似 drawdb 的数据库设计工具 iphone设备参数对比 24 h 搜书 Artificial Analysis：大模型能力、价格、速度对比的工具 plane - 开源项目管理工具 hey - 一个基于 go 语言编写的类似 ab 命令的压测工具，简单易用 chsrc - 全平台命令行换源工具 502book - 一个专注找书的网站 revezone - 各种画板工具的聚合 legado - 阅读3.0 imFile - 又一个新型的下载工具 caesium.app - 免费的图片压缩工具 Enjoy - AI 是当今世界上最好的外语老师，Enjoy 做 AI 最好的助教 alternativeto - 一个用于寻找替代软件的网站 AlternativeTo Pearcleaner - 开源的 Mac 软件卸载工具 Pearcleaner Darktable - 开源的摄影后期处理工具 算法可视化 grep.app - 替代 Github 搜索的工具，速度快 https://zigma.io/ - 用 AI 搜索 AI 工具 askaitools.ai - 开源的设计平台 socialscreenshots - 一个更加易用的社交网络的截图工具 图解 QUIC 连接 Rime输入法自动安装脚本 Pake RegexLearn - 用游戏的方式学习正则表达式 steam工具箱 notion帮助文档 LLM Pricing - 大模型费用列表 谁在用cookies - 是一款 Chrome 浏览器扩展，旨在帮助用户检测和监控所有扩展程序是否具有读取他们浏览器 Cookie 的权限。 chsrc - 全平台命令行换源工具 Copybook Generator - 「宝宝字帖」是一款功能强大的字帖生成工具，专为满足不同用户的书写练习需求而设计 Slidev - 用markdown写ppt BiliVideoDown - BiliVideoDown 是一款基于 Flutter 开发的桌面端 B 站视频下载器。 math.bot - 用GPT-4o 解答数学题 Artalk | 自托管评论系统 email.ml - 一个超级简单易用的临时邮箱 iPhone参数大全 - 一个用于对比 Apple 全家桶所有机型参数的网站 hiddify-next - 通用代理工具的跨平台代理客户端 HandBrake - 开源视频解码器 bilidown - 网页快速下载bilibili视频 LLM价格对比 chrome插件 - pin-tabs TalkWithGemini - 开源Gemini Pro 极简聊天框架 景深模拟器 - 摄影 janereader - 现代化的 epub 阅读器 DuckDuckGo AI Chat - DuckDuckGo的ai聊天服务 - gpt Chat With Llama 3 - Meta AI - Llama3的聊天服务 - gpt 小红旅记 - 用小红书规划你的旅行 红心歌单助手 - 支持网易云音乐, QQ音乐, 眯咕音乐, 酷狗音乐*, Spotify, Apple Music歌单的互相迁移 revezone - 一个聚合了 Tldraw 和 Excalidraw 的网站。特点是可以保存多个文件，而且可以通过 tab 切换。 LLM Pricing - LLM价格对比网站 teable - 开源的 Airtable 替代品 huggingface - ai平台，支持使用多个大模型 imfile - 支持下载HTTP、FTP、BitTorrent、Magnet等的好用的下载工具 单词森林 - 一个简洁实用的英语单词学习工具 Memos - 一个开源的可以自己部署的flomo平替应用 z2h字帖 吐司简历 - 直接在线填写简历内容 开箱即用的 Obsidian / Typora 简历 Applite - mac下homebrew可视化工具 FastChat - 用于训练和评估大型语言模型的开放平台，可以在同一个界面对不同模型的输出进行可视化比对 Jan - 一站式体验 LLMs 的桌面应用。这是一个支持在本地运行开源 LLMs 和连接 ChatGPT 服务的 AI 对话桌面应用，它开箱即用、界面清爽、不挑硬件，支持设置代理、接入 ChatGPT、一键下载/接入适配当前电脑配置的大模型、离线运行等功能，适用于 Windows、Linux、macOS 操作系统。 Chat Nio - ai套壳API工具 - 下一代 AI 一站式解决方案 EpubPress - 是一个适用于 Chrome\u0026amp;Firefox 的浏览器扩展，可以将您喜爱的网络内容转换为电子书 Dockge - 开源的docker compose可视化编辑器，很好用 Random AI Product - 随机介绍一个ai产品 Trancy - 沉浸式AI语言学习工具 - 翻译工具 哔哩下载姬(跨平台版) - bilibili下载工具 pagescms - 为静态博客配置cms 丁香用药助手 - 实用 芯片性能排行榜 graphize - 看起来不错的 JSON 可视化的工具 searchemoji - 好用的emoji搜索引擎 mac-cleanup-py - 适用于 macOS 的 Python 清理脚本 小懒搜书 - 搜书引擎聚合站 Yida - 免费开源多平台聚合工具 atvcop - copilot激活工具 gopeed - 下载工具 EasyDevo - mac清理工具 Lyrify - 一个聚合翻译的网站 24h搜书网 油猴脚本 - 京东商品参数对比工具 秘塔AI搜索 - 没有广告的ai搜索引擎 Noi - - 跨平台的桌面应用，在一个界面里面集成了多个 AI 网站，支持复用提示，以及同时向多款 AI 提问 大盘云图 - 通过大盘展示股票信息的工具 YesChat - 每天可以用20次gpt4额度 Notion 新产品日历工具：Calendar 沉浸式翻译 - 本地翻译文件工具 正则表达式可视化工具 typing-一个简洁的打字练习网站 BewlyBewly - Bilibili主页美化chrome插件 吉他自学工具站 Gemini Pro Chat - 一键免费部署你的跨平台私人 Gemini 应用, 支持Gemini Pro 模型。基于 ChatGPT Next Web. Loom - 又一个类似utool的生产力工具 最佳平替 Fitten Code：免费AI代码助手 Douban Book+ - 发现好书靠豆瓣，阅读好书靠 Douban Book+ CV - 一个简洁的，构建个人在线简历的项目 翻译本地文件 Gemini Chat Pro - 免费的谷歌 Gemini Chat Pro，在线网站 便签 Pro - v站看到的推广: MacOS 最锋利的便签笔记 资源 科幻小说作品集 我的世界开发者中文指南 软考中级教程 - 软件设计师 - 一份 “软件设计师” 的学习路径，含有 APP、真题、课本、参考文档等内 系统设计面试：内幕指南（中文翻译） 中国历朝代历史视频讲解 故宫高清壁纸 - 可以用来学一下怎么拍静态 一个自建IM项目 MasteringRAG - 一个使用 LLM（大语言模型）使用 RAG 技术构建文档问答的项目 DeepLearning-Interview-Awesome-2024 - AIGC面试问题与答案集合仓 阿里云 - 开发者藏经阁 gpt-computer-assistant - GPT计算助手 - 打算用来结合设备玩一下 智能家居 python-miio - 用于控制小米智能家电的 Python 库 智能家居 # OV-Watch - 手动造一个智能手表 - 智能硬件 油炸鸡开源硬件 - 硬核智能硬件项目 LeapLedger - 是一个的前后端分离免费开源的记账软件 收纳、分享、探索优质网站 稀奇 - 一个分享博主收集的一些好的网站、产品的站点 年度奖项与报告 github书籍资源下载(约10w本) - 目录搜索 阮一峰工具集 go-learning - go-learning 适用于有一定 kubernetes 经验，且想更进一步的同学 Home-Assistant-DIY - 智能家居 diy 猫啃网 - 免费字体商用网站 MacAppHQ - 收录正版、好用的 mac 产品 有用的经验 云端奇趣 - 资源分享站 独立开发 / 出海开发相关技术栈及工具收录 MMSearch - 对大型模型作为多模式搜索引擎的潜力进行基准测试 LibreTranslate - 自部署翻译 API hexo-theme-sea -一个功能丰富、易于配置、风格简约的 Hexo 博客主题。 90DaysOfDevOps - 90 天进阶 devops ai工具导航 k8s_PaaS - 基于 Kubernetes (K 8 S) 一步步部署成 PaaS/DevOps 的一整套教程 RAG_Techniques - 先进的 RAG 技术：提升您的检索增强生成系统 Anthropic courses - ai …","date":1735689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"c9800e5a5eb14e38aa92d9505e972219","permalink":"https://wuyiwai.github.io/post/2024%E5%B9%B4%E6%9C%89%E8%B6%A3%E9%A1%B9%E7%9B%AE/","publishdate":"2025-01-01T00:00:00Z","relpermalink":"/post/2024%E5%B9%B4%E6%9C%89%E8%B6%A3%E9%A1%B9%E7%9B%AE/","section":"post","summary":"汇总了2024年的一些有趣的项目","tags":["技术年刊"],"title":"2024年有趣项目","type":"post"},{"authors":null,"categories":null,"content":"教程 Go 程序员宝典 书 自洽的程序员 生成式AI手册 | 英文 rust 100 - 用100个练习题学习rust | rust - 中文 大语言模型 | 中文 - 支持下载 工具 biofy - 定制个人主页分享卡片，方便推广 | 独立开发 https://web.archive.org/ - 一个旨在保存互联网历史记录的平台 淘趣 - 免费的壁纸设备效果生成器 MarkEdit - markdown工具新秀 电动汽车省钱计算器 3分钟AI读书 - 同时这个应用也是一个非常用的独立应用开发典范 Awesome Bilibili Extra - 收集一些让我们在使用 B 站时更加方便的浏览器扩展 / 脚本 / 程序 STranslate - 又一款OCR翻译利器 cursor.directory - cursor 提示词集合 文章 大橘和朋友们的周刊 - 第 024 期 - 云渡新岁 - 非常多有意思的应用 我是如何从零开始手搓一个独立游戏并上架 Steam 的 ","date":1735689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"5f39a35db507d3856129b035dec11de4","permalink":"https://wuyiwai.github.io/post/2025%E5%B9%B41%E6%9C%88/","publishdate":"2025-01-01T00:00:00Z","relpermalink":"/post/2025%E5%B9%B41%E6%9C%88/","section":"post","summary":"汇总了2025年1月的一些有趣的项目","tags":["技术月刊"],"title":"2025年1月","type":"post"},{"authors":null,"categories":null,"content":" 参考资料\nSwoole Tracker 内存泄漏分析器 v4.0 正式发布 扩展下载链接 安装扩展 查看php版本 $ php -v PHP 8.0.20 (cli) (built: Jul 6 2022 20:19:43) ( NTS ) Copyright (c) The PHP Group Zend Engine v4.0.20, Copyright (c) Zend Technologies with Zend OPcache v8.0.20, Copyright (c), by Zend Technologies 得到 php8.0 和 NTS 版本两个信息，去下载链接下载 memory_tracker_4.0.0_linux_x64_80.so\n查看PHP扩展目录并把.so文件复制到该目录中 $ php -i | grep extension_dir xtension_dir =\u0026gt; /usr/local/php/lib/php/extensions/no-debug-non-zts-20200930 =\u0026gt; /usr/local/php/lib/php/extensions/no-debug-non-zts-20200930 sqlite3.extension_dir =\u0026gt; no value =\u0026gt; no value 修改 php.ini 文件，启用扩展 # 找到 php.ini 文件的路径 $ php --ini Configuration File (php.ini) Path: /usr/local/php/ Loaded Configuration File: /usr/local/php/php.ini Scan for additional .ini files in: (none) Additional .ini files parsed: (none) # vim /usr/local/php/php.ini 文件 # 添加一行 extension=memory_tracker.so 以启用该扩展 查看扩展是否启用成功 $ php --ri memory_tracker memory_tracker memory_tracker support =\u0026gt; enabled Copyright =\u0026gt; 上海识沃网络科技有限公司 Email =\u0026gt; service@swoole.com Website =\u0026gt; https://www.swoole.com/ Version =\u0026gt; 4.0.0 Directive =\u0026gt; Local Value =\u0026gt; Master Value memory_tracker.enable =\u0026gt; Off =\u0026gt; Off You have mail in /var/spool/mail/roo 测试 普通数组、字符串无限扩容导致的内存泄漏 普通的cli环境 cli.php class ClassA { public array $arr = []; public string $str = \u0026#39;\u0026#39;; } function foo(ClassA $obj) { $str = str_repeat(\u0026#34;big string\u0026#34;, 1024); $obj-\u0026gt;arr[] = $str; $obj-\u0026gt;str .= $str; } $obj = new ClassA(); $usage = memory_get_usage(); $n = 100; while ($n--) { foo($obj); } var_dump(strlen($obj-\u0026gt;str)); var_dump(memory_get_usage() - $usage); memory_tracker_leak_check(); 执行\n# 不开启内存检测，不会有性能消耗 $ php cli.php int(1024000) int(2259616) -------------------------- # 开启检测 $ php -d memory_tracker.enable=1 cli.php int(1024000) int(2270440) [Round#0] leak 1000.03 KB bytes, alloc 99 times at /data/codebase/wuyiwai/debug/cli.php:12 #0 /data/codebase/wuyiwai/debug/cli.php(19): foo(Object(ClassA)) [Round#0] leak 1003.12 KB bytes, alloc 100 times at /data/codebase/wuyiwai/debug/cli.php:10 #0 /data/codebase/wuyiwai/debug/cli.php(10): str_repeat(\u0026#39;...\u0026#39;, 1024) #1 /data/codebase/wuyiwai/debug/cli.php(19): foo(Object(ClassA)) 协程环境 co_server.php \u0026lt;?php class Test { public $arr = []; function run() { $locals = \u0026#39;\u0026#39;; $this-\u0026gt;run2($locals); } function run2(\u0026amp;$locals) { global $global1, $global2; $http = new \\Swoole\\Http\\Server(\u0026#34;0.0.0.0\u0026#34;, 9501, SWOOLE_BASE); $http-\u0026gt;set([ \u0026#39;worker_num\u0026#39; =\u0026gt; 1 ]); $http-\u0026gt;on(\u0026#34;start\u0026#34;, function ($server) { }); $http-\u0026gt;on(\u0026#34;request\u0026#34;, function ($req, $resp) use (\u0026amp;$global1, \u0026amp;$global2, \u0026amp;$locals) { $global2 .= \u0026#34;2222222222\u0026#34;; $locals .= \u0026#34;333333333333\u0026#34;; $global1[] = random_bytes(random_int(256, 4096)); $this-\u0026gt;arr[] = \u0026#34;444444444\u0026#34;; $resp-\u0026gt;end(\u0026#34;hello world\u0026#34;); memory_tracker_leak_check(128); }); $http-\u0026gt;start(); } } (new Test())-\u0026gt;run(); 执行\n$ php -d memory_tracker.enable=1 co_server.php 发起请求\nab -c 5 -n 5000 http://127.0.0.1:9501/ 检测结果\n[Round#121] leak 271.35 KB bytes, alloc 128 times at /data/codebase/wuyiwai/debug/co_server.php:25 [Round#128] leak 1.54 KB bytes, alloc 128 times at /data/codebase/wuyiwai/debug/co_server.php:24 [Round#128] leak 1.29 KB bytes, alloc 128 times at /data/codebase/wuyiwai/debug/co_server.php:23 ... [Round#2909] leak 278.62 KB bytes, alloc 128 times at /data/codebase/wuyiwai/debug/co_server.php:25 [Round#2944] leak 34.54 KB bytes, alloc 128 times at /data/codebase/wuyiwai/debug/co_server.php:24 [Round#2944] leak 28.79 KB bytes, alloc 128 times at /data/codebase/wuyiwai/debug/co_server.php:23 ... [Round#4981] leak 272.08 KB bytes, alloc 128 times at /data/codebase/wuyiwai/debug/co_server.php:25 [Round#4992] leak 48.79 KB bytes, alloc 128 times at /data/codebase/wuyiwai/debug/co_server.php:23 [Round#4992] leak 58.54 KB bytes, alloc 128 times at /data/codebase/wuyiwai/debug/co_server.php:24 代码解释 在代码中，一个请求会对4个不同的变量做操作，分别是：\n$global2 .= \u0026#34;2222222222\u0026#34;; // 10 byte $locals .= \u0026#34;333333333333\u0026#34;; // 12 byte $global1[] = random_bytes(random_int(256, 4096)); $this-\u0026gt;arr[] = \u0026#34;444444444\u0026#34;; 其中 关于：co_server.php:25-\u0026gt;leak 271.35 KB bytes对应$global1[] = random_bytes(random_int(256, 4096));，因为这个函数逻辑每次会产生 256 ~ 4096 范围的int，设定每 128 次打印一次内存泄漏。那么每128次泄漏的内存平均为 (256 + 4096) / 2 * 128 / 1024 = 272 KB\n关于：co_server.php:24-\u0026gt;leak 1.54 KB bytes对应$locals .= \u0026#34;333333333333\u0026#34;;: 因为 333333333333 占用 12 个byte。每 128 次泄漏的内存为 128 * 12 / 1024 = 1.5 KB，而且由于写法是 .=，泄露的内存在一直不断的累加\n关于co_server.php:23-\u0026gt;leak 1.29 KB bytes对应$global2 .= \u0026#34;2222222222\u0026#34;;：因为 333333333333 占用 10 个byte。每 128 次泄漏的内存为 128 * 10 / 1024 = 1.25 KB，而且由于写法是 .=，泄露的内存在一直不断的累加\n关于$this-\u0026gt;arr[] = \u0026#34;444444444\u0026#34;;，由于该变量是个类实例变量，尽管每次请求都会往里添加一个元素，但这种增长方式是线性可预测的内存增长，并不算内存泄漏\n循环引用 const N = 200; class testA { public $pro; } function foo() { var_dump(memory_get_usage()); for ($i = 0; $i \u0026lt; N; $i++) { $obj = new testA(); $obj-\u0026gt;pro = $obj; unset($obj); memory_tracker_leak_check(64); } var_dump(memory_get_usage()); } foo(); 执行\n$ php -d memory_tracker.enable=1 gc.php int(1757304) [Round#63] leak 3.50 KB bytes, alloc 64 times at /data/codebase/wuyiwai/debug/gc.php:11 #0 /data/codebase/wuyiwai/debug/gc.php(19): foo() [Round#96] leak …","date":1732060800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"a5d2ca5a0999c23a8b7ac4a1a10272c6","permalink":"https://wuyiwai.github.io/post/php-memory-tracker-%E6%B5%8B%E8%AF%95/","publishdate":"2024-11-20T00:00:00Z","relpermalink":"/post/php-memory-tracker-%E6%B5%8B%E8%AF%95/","section":"post","summary":"记录php-memory-tracker的一些测试","tags":["技术","swoole"],"title":"php-memory-tracker 测试","type":"post"},{"authors":null,"categories":null,"content":" Hyperf文档 协程上下文思路 \u0026lt;?php use Hyperf\\Context\\Context; // 将 bar 字符串以 foo 为 key 储存到当前协程上下文中 $foo = Context::set(\u0026#39;foo\u0026#39;, \u0026#39;bar\u0026#39;); // set 方法会再将 value 作为方法的返回值返回回来，所以 $foo 的值为 bar \u0026lt;?php use Hyperf\\Context\\Context; // 从当前协程上下文中取出 key 为 foo 的值，如不存在则返回 bar 字符串 $foo = Context::get(\u0026#39;foo\u0026#39;, \u0026#39;bar\u0026#39;); \u0026lt;?php use Hyperf\\Context\\Context; // 从当前协程上下文中判断 key 为 foo 的值是否存在 $foo = Context::has(\u0026#39;foo\u0026#39;); \u0026lt;?php use Psr\\Http\\Message\\ServerRequestInterface; use Hyperf\\Context\\Context; // 从协程上下文取出 $request 对象并设置 key 为 foo 的 Header，然后再保存到协程上下文中 $request = Context::override(ServerRequestInterface::class, function (ServerRequestInterface $request) { return $request-\u0026gt;withAddedHeader(\u0026#39;foo\u0026#39;, \u0026#39;bar\u0026#39;); }); 替换类用 /class_map/xxx 来统一文件路径 短生命周期对象 - make - 参考 获取容器对象 - $container = \\Hyperf\\Context\\ApplicationContext::getContainer(); -参考 使用db实例 - $db = ApplicationContext::getContainer()-\u0026gt;get(DB::class); - 参考 ","date":1732060800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"80cdda871c94cd7a4513a256e8edccec","permalink":"https://wuyiwai.github.io/post/%E5%8D%8F%E7%A8%8B%E7%9B%B8%E5%85%B3/","publishdate":"2024-11-20T00:00:00Z","relpermalink":"/post/%E5%8D%8F%E7%A8%8B%E7%9B%B8%E5%85%B3/","section":"post","summary":"记录协程开发的一些概念，设计理念","tags":["技术","协程","hyperf","swoole"],"title":"协程相关知识","type":"post"},{"authors":null,"categories":null,"content":"安卓 🔥 Hydrogen - 第三方知乎，界面简洁清爽，体积超级小，没有广告，没有其他多余复杂的功能 🔥 MX Player - 强大的视频播放器 🔥 PiliPalaX - 干净的第三方b站客户端 repov - 记录观点的app 成分喵 PC massCode - 开源代码片段管理工具 zen浏览器 - 可定制的浏览器 ","date":1732060800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"a8a26643a72025d8cbf1454a91db7967","permalink":"https://wuyiwai.github.io/post/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/","publishdate":"2024-11-20T00:00:00Z","relpermalink":"/post/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/","section":"post","summary":"记录好用的一些应用，留个坑后续更新","tags":["软件"],"title":"软件使用记录","type":"post"},{"authors":null,"categories":null,"content":"准备材料 swoole 官网\n源码发行版本\n下载源码\n解压源码，cd 到源码目录\n$ phpize $ ./configure $ sudo make \u0026amp;\u0026amp; sudo make install 找到 php. ini 的目录 $ php -i | grep php.ini Configuration File (php.ini) Path =\u0026gt; /opt/homebrew/etc/php/8.3 Loaded Configuration File =\u0026gt; /opt/homebrew/etc/php/8.3/php.ini 在 php. ini 中加入一行 extension=swoole.so 来启用 swoole 扩展 检查是否启用了 swoole 扩展 $ php --ri swoole swoole Swoole =\u0026gt; enabled Author =\u0026gt; Swoole Team \u0026lt;team@swoole.com\u0026gt; Version =\u0026gt; 6.0.0 Built =\u0026gt; Sep 30 2024 15:10:53 coroutine =\u0026gt; enabled with boost asm context kqueue =\u0026gt; enabled rwlock =\u0026gt; enabled http2 =\u0026gt; enabled json =\u0026gt; enabled pcre =\u0026gt; enabled zlib =\u0026gt; 1.2.12 brotli =\u0026gt; E16781312/D16781312 Directive =\u0026gt; Local Value =\u0026gt; Master Value swoole.enable_library =\u0026gt; On =\u0026gt; On swoole.enable_fiber_mock =\u0026gt; Off =\u0026gt; Off swoole.enable_preemptive_scheduler =\u0026gt; Off =\u0026gt; Off swoole.display_errors =\u0026gt; On =\u0026gt; On swoole.use_shortname =\u0026gt; On =\u0026gt; On swoole.unixsock_buffer_size =\u0026gt; 262144 =\u0026gt; 262144 遇到的问题 /opt/homebrew/Cellar/php/8.3.8/include/php/ext/pcre/php_pcre. h:23:10: fatal error: ‘pcre 2. h’ file not found 本质是系统缺少 pcre 2 库或者 pcre 2. h 头文件没有被正确地链接到 PHP 的安装目录\n首先确保已经安装了 pcre 2 的库 brew install pcre2 创建软链, 注意替换正确的链接 ln -s /opt/homebrew/Cellar/pcre2/10.44/include/pcre2.h /opt/homebrew/Cellar/php/8.3.8/include/php/ext/pcre/pcre2.h ","date":1727654400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"45ad4cc27749367a6b26e79b3d1ebc1d","permalink":"https://wuyiwai.github.io/post/%E5%AE%89%E8%A3%85swoole/","publishdate":"2024-09-30T00:00:00Z","relpermalink":"/post/%E5%AE%89%E8%A3%85swoole/","section":"post","summary":"记录mac本地安装swoole的过程，方便自用","tags":["技术","swoole"],"title":"安装swoole","type":"post"},{"authors":null,"categories":null,"content":"鱼油 Omega-3 脂肪酸含量：每天建议摄入 1000 mg EPA 和 DHA 的比例：建议 3:2 EPA 高：对心血管健康好 DHA 高：对大脑和视力好 吸收形式： TG（甘油三酯）：这是鱼油中的天然形式，人体可以直接吸收。一些研究表明，空腹服用时，TG 型鱼油的吸收率可能略高于 EE 型。TG 型鱼油通常口感较好，且抗酸败能力较强。但是，未经提纯的 TG 型鱼油中 Omega-3 含量较低，需要服用更多胶囊才能达到推荐的 Omega-3 摄入量 EE（乙酯）：这种形式是通过化学过程从 TG 型转化而来的，可以提高 Omega-3 的浓度，通常可以达到 60% 至 70%。EE 型鱼油因为浓度高，所以服用较少的剂量就可以达到相同的 Omega-3 摄入量。然而，一些消费者可能对 EE 型鱼油的化学加工过程有所顾虑。 rTG（再酯化甘油三酯）- 比较推荐：这种形式是通过将 EE 型鱼油通过酶处理转化回甘油三酯形式，同时保持高浓度的 Omega-3。rTG 型鱼油结合了 TG 型和 EE 型的优点，具有较高的吸收率和较高的 Omega-3 浓度。但是，rTG 型鱼油的生产成本较高，因此价格通常也更高。 纯度：建议高于 80% 的浓度更加有效 结论：\n鱼油：金凯撒 锌：葡萄糖酸锌片（一小瓶的那种） 护肝片：斯维诗高浓度水飞蓟 眼霜 成分有效性 水分和保湿：眼周皮肤容易干燥，所以保湿成分如透明质酸、甘油、角鲨烷等是基础。 胜肽和氨基酸：这些成分有助于刺激胶原蛋白的生成，减少细纹。 维生素C和E：具有抗氧化作用，可以帮助减少自由基对皮肤的损害，维生素C还有助于提亮肤色，对淡化黑眼圈有一定效果。 咖啡因：可以促进血液循环，有助于减少眼部肿胀和黑眼圈。 视黄醇（维生素A）：有助于促进细胞更新，改善细纹和皮肤松弛。 尼克酰胺（维生素B3）：有助于提亮肤色，减少色素沉着。 成分安全性 确保产品没有添加对眼周敏感的成分，比如酒精、香料或其他可能刺激的成分。 针对性解决 黑眼圈： 咖啡因：咖啡因是一种常见的成分，它可以刺激血液循环，减少眼周皮肤的肿胀和暗沉。它有助于快速缓解黑眼圈，尤其是那些由于血液循环不佳造成的。 维生素C：维生素C是一种强效抗氧化剂，能够抵抗自由基损伤，并有助于提亮肤色和减少色素沉着。选择**含有稳定形式的维生素C（如抗坏血酸或其衍生物）**的眼霜可能有助于改善黑眼圈。 尼克酰胺（维生素B3）：尼克酰胺具有抗炎作用，并能够提亮肤色，减少色素沉积，适合那些黑眼圈伴随有色素沉着的人使用。 肽类：某些肽类成分如Palmitoyl Tetrapeptide-7和Palmitoyl Oligopeptide可以增强皮肤弹性，减少细纹，并可能有助于减轻黑眼圈。 视黄醇（维生素A）：尽管视黄醇主要用于抗衰老，它也可以促进胶原蛋白的生成，改善皮肤质地，从而间接影响黑眼圈的外观。 保湿成分：透明质酸、甘油等成分可以帮助保湿和充盈眼周皮肤，使其看起来更加饱满，减少黑眼圈的显著性。 ","date":1726963200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"80441d90a3857f7c5fe99a58882837f5","permalink":"https://wuyiwai.github.io/post/%E8%B4%AD%E7%89%A9%E7%9B%B8%E5%85%B3/","publishdate":"2024-09-22T00:00:00Z","relpermalink":"/post/%E8%B4%AD%E7%89%A9%E7%9B%B8%E5%85%B3/","section":"post","summary":"记录一些保健品相关的知识，方便后续购买有足够的知识依据","tags":["购物","保健品"],"title":"保健品相关知识","type":"post"},{"authors":null,"categories":null,"content":" 告白之夜 - 岛村绚沙 - 灵感来自于日本古典文学《竹取物语》，特别是描述了故事中的主角辉夜姬在即将回到月亮之前，向养育她的人间父母告别的情节。这首曲子所表达的并不是一般意义上的 “告白”，而是一种 “告别陈述” 的情感，充满了离别的悲伤和对养育之恩的感激 The Sound of Silence \u0026lt;沉默之音\u0026gt;- 是由 Paul Simon 和 Art Garfunkel 组成的著名二重唱组合 Simon \u0026amp; Garfunkel 的代表作之一 - 这首歌曲的创作背景与 1960 年代的美国社会密切相关。那是一个动荡的时代，美国社会经历了种族歧视、民权运动、越南战争等一系列社会问题。在这样的背景下，Paul Simon 创作了这首反映社会现实和人们内心世界的歌曲。《The Sound of Silence》歌词中提到的 “人们说而不言，听而不闻”（People talking without speaking, people hearing without listening），被广泛解读为对当时社会冷漠、缺乏沟通和深层次理解的批判 A Morning in Cornwall \u0026lt;康沃尔的早晨\u0026gt; - 德国轻音乐大师 James Last（詹姆斯・拉斯特） - 以其清亮悠远的排箫旋律，带给听者宁静而安详的感觉，仿佛置身于晨曦微露、林间与田野晨雾缭绕的康沃尔郡。康沃尔郡位于英格兰西南端，以其美丽曲折的海岸线和苍翠掩映的山谷闻名。 Kiss the Rain \u0026lt;雨的印记\u0026gt; - 韩国钢琴家兼作曲家 Yiruma（李闰珉） - 据说 Yiruma 在一个星光璀璨的夜晚，突然下起了雨，这场雨激发了他的灵感，从而创作出了这首曲子。《Kiss the Rain》的意境和背景给人以宁静和思考的空间，它的旋律能够触动人心，让人在忙碌的生活中找到一丝宁静和安慰 ","date":1726272e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"96e66875d8bf7f3aae78a353a0214278","permalink":"https://wuyiwai.github.io/post/%E8%BD%BB%E9%9F%B3%E4%B9%90/","publishdate":"2024-09-14T00:00:00Z","relpermalink":"/post/%E8%BD%BB%E9%9F%B3%E4%B9%90/","section":"post","summary":"记录想弹奏的一些轻音乐","tags":["音乐"],"title":"轻音乐","type":"post"},{"authors":null,"categories":null,"content":"进入一个服务的 terminal # 进入服务的terminal $ docker exec -it $(docker ps -q -f name=\u0026lt;containerId\u0026gt;) /bin/bash $ docker exec -it $(docker ps -q -f name=shops-xdebug) /bin/bash \u0026amp;\u0026amp; cd ./reli-prof php ./reli i:memory -p 7 \u0026gt;7.memeory_dump.json php ./reli i:memory -p 10 \u0026gt;10.memeory_dump.json nohup php TestReli.php \u0026gt; output.log 2\u0026gt;\u0026amp;1 \u0026amp; ./reli i:trace -p 12 或者一个简单的 shell\n#!/bin/bash # 获取所有名为\u0026#34;shops\u0026#34;的容器ID列表 container_ids=$(docker ps -q -f name=shops) # 检查是否有容器ID被找到 if [ -z \u0026#34;$container_ids\u0026#34; ]; then echo \u0026#34;No containers found with name shops.\u0026#34; exit 1 fi # 进入第一个找到的容器 docker exec -it $(echo \u0026#34;$container_ids\u0026#34; | head -n 1) /bin/sh ","date":1724716800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"0574de6dc8130d3ffd1a52f248b486cc","permalink":"https://wuyiwai.github.io/post/docker%E9%80%9F%E8%AE%B0/","publishdate":"2024-08-27T00:00:00Z","relpermalink":"/post/docker%E9%80%9F%E8%AE%B0/","section":"post","summary":"记录docker的一些快查命令","tags":["技术","docker"],"title":"docker速记","type":"post"},{"authors":null,"categories":null,"content":"安装 详见文档 - 如何安装 Xdebug\n兼容性 详见文档 - 兼容性\nreli https://xmkm.yuque.com/armee3/wg6g9f/ln1mqkslwdvc35m4 ","date":1724630400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"41a1b47b270e0afd1211b04c03d8793d","permalink":"https://wuyiwai.github.io/post/%E4%BD%BF%E7%94%A8-xdebug3-%E8%B0%83%E8%AF%95-docker-%E4%B8%AD%E7%9A%84-swoole-%E9%A1%B9%E7%9B%AE/","publishdate":"2024-08-26T00:00:00Z","relpermalink":"/post/%E4%BD%BF%E7%94%A8-xdebug3-%E8%B0%83%E8%AF%95-docker-%E4%B8%AD%E7%9A%84-swoole-%E9%A1%B9%E7%9B%AE/","section":"post","summary":"已写草稿，留坑后续更新","tags":["技术","swoole","xdebug"],"title":"使用 xdebug3 调试 docker 中的 swoole 项目","type":"post"},{"authors":null,"categories":null,"content":"找到 php. ini 的位置 $ php --ini Configuration File (php.ini) Path: /opt/homebrew/etc/php/8.3 Loaded Configuration File: /opt/homebrew/etc/php/8.3/php.ini Scan for additional .ini files in: /opt/homebrew/etc/php/8.3/conf.d Additional .ini files parsed: /opt/homebrew/etc/php/8.3/conf.d/ext-opcache.ini # 运行脚本 \u0026lt;?php var_dump(php_ini_loaded_file(), php_ini_scanned_files()); ","date":1724371200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"bfc2a4f9da380c0e86ba7005d8bf88b2","permalink":"https://wuyiwai.github.io/post/php%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","publishdate":"2024-08-23T00:00:00Z","relpermalink":"/post/php%E8%B0%83%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","section":"post","summary":"记录PHP调试速查命令","tags":["技术","php"],"title":"PHP调试常用命令","type":"post"},{"authors":null,"categories":null,"content":"配置 # 查看全局配置列表 git config --global -l 管理仓库 # 查看远程仓库服务器, 一般打印 origin , 这是 Git 给你克隆的仓库服务器的默认名字 # 一般只会显示 origin , 除非你有多个远程仓库地址 git remote # 指定-v, 查看当前远程仓库地址 git remote -v 暂存文件 # 暂存所有 git add -A # 暂存某个文件 git add ./README.md # 暂存当前目录所有改动文件 git add . # 暂存一系列文件 git add 1.txt 2.txt ... 提交文件 # -m 提交的描述信息 git commit -m \u0026#34;changes log\u0026#34; # 只提交某个文件 git commit README.md -m \u0026#34;message\u0026#34; # 重写上一次提交信息，确保当前工作区没有改动 git commit --amend -m \u0026#34;新的提交信息\u0026#34; 推送远端 # 默认推送当前分支 # 等价于 git push origin, 实际上推送到一个叫 origin 默认仓库名字 git push # 推送到主分支 git push -u origin main # 本地分支推送到远程分支， 本地分支:远程分支 git push origin \u0026lt;branchName\u0026gt;:\u0026lt;branchName\u0026gt; # 强制推送, --force 缩写 git push -f 查看分支 # 查看所有分支 git branch -a # 查看本地分支 git branch # 查看远端分支 git branch -r # 查看本地分支所关联的远程分支 git branch -vv # 查看本地 main 分支创建时间 git reflog show --date=iso main # 搜索分支, 借助 grep 命令來搜索, 包含关键字 dev git branch -a | grep dev 关了分支 # 创建一个名为 develop 本地分支 git branch develop # 强制创建分支, 不输出任何警告或信息 git branch -f develop # 创建本地 develop 分支并切换 git checkout -b develop # 创建远程分支, 实际上创建本地分支然后推送到远端 git checkout -b develop git push origin develop # 删除本地分支 $ git branch -d \u0026lt;branchName\u0026gt; 临时保存 # 保存当前修改工作区内容 git stash # 保存时添加注释, 推荐使用此命令 git stash save \u0026#34;修改了#28 Bug\u0026#34; # 保存包含没有被git追踪的文件 git stash -u # 查看当前保存列表 git stash list # 恢复修改工作区内容, 会从 git stash list 移除掉 git stash pop # 恢复最近一次保存内容到工作区, 默认会把暂存区的改动恢复到工作区 git stash pop stash@{1} # 恢复指定 id， 通过 git stash list 可查到 git stash pop --index # 恢复最近一次保存内容到工作区, 但如果是暂存区的内容同样恢复到暂存区 # 与 pop 命令一致, 唯一不同的是不会移除保存列表 git stash apply # 清空所有保存 git stash clear # 清空指定 stash id, 如果 drop 后面不指定id清除最近的一次 git stash drop stash@{0} git stash drop # 清除最近一次 # 查看已保存的修改文件内容 git stash show -p stash@{0} 文件状态 # 完整查看文件状态 git status # 以短格式给出输出 git status -s 日志 # 查看完整历史提交记录 git log # 查看前N次提交记录 commit message git log -2 # 从 commit 进行搜索, 可以指定 -i 忽略大小写 git log -i --grep=\u0026#34;fix: #28\u0026#34; 查看某个分支的merge记录 git log --oneline --merges --pretty=format:\u0026#34;%Cred hash[ %h] %Cgreen人[%an] %Cblue time[%ad] %Creset msg[%s]\u0026#34; --date=format:\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39; \u0026lt;branch\u0026gt; # 查看指定作者历史记录 git log --author=xjh22222228 # 只显示合并日志 git log --merges # 以倒序查看历史记录 git log --reverse 合并 feature/v1.0.0 分支代码合并到 develop\ngit checkout develop git merge feature/v1.0.0 合并分支后不进行提交\ngit merge develop --no-commit 退出合并，恢复到合并之前的状态\ngit merge --abort 还原 # 撤销工作区文件修改, 不包括新建文件 git restore README.md # 一个文件 git restore README.md README2.md # 多个文件 git restore . # 当前全部文件 # 从暂存区回到工作区 git restore --staged README.md 比较差异 # 查看所有文件工作区与暂存区的差异 git diff # 查看指定文件工作区与暂存区差异 git diff README.md # 查看指定 commit 内容差异 git diff dce06bd # 对比2个commit之间的差异 git diff e3848eb dce06bd # 比较2个分支最新提交内容差异, develop分支与main分支, 如果没有差异返回空 git diff develop main # 比较2个分支指定文件内容差异, develop 和 main READNE.md 文件差异 git diff develop main README.md README.md # 查看工作区冲突文件差异 git diff --name-only --diff-filter=U # 查看上一次修改了哪些文件 git diff --name-only HEAD~ git diff --name-only HEAD~~ # 前2次... ","date":1722384e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"22ca5ebce83002b1377989a7e8daea54","permalink":"https://wuyiwai.github.io/post/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","publishdate":"2024-07-31T00:00:00Z","relpermalink":"/post/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","section":"post","summary":"记录git的一些常用命令","tags":["技术","git"],"title":"Git常用命令","type":"post"},{"authors":null,"categories":null,"content":"安装NVM和最新NPM 安装nvm，打开你的终端，然后输入以下命令： curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash 重启你的终端，然后验证nvm是否成功安装，输入以下命令： nvm --version 使用nvm安装新的Node.js版本，输入以下命令： nvm install node 这将会安装最新版本的Node.js。\n切换到新安装的Node.js版本，输入以下命令： nvm use node 验证Node.js版本，输入以下命令： node -v 现在你应该可以更新npm到最新版本了。再次尝试运行以下命令：\nnpm install -g npm@latest 管理npm的包 查看npm安装过的包 npm list -g --depth=0 /Users/wuyiwai/.nvm/versions/node/v20.2.0/lib ├── cnpm@9.2.0 ├── corepack@0.17.2 ├── hexo-cli@4.3.1 └── npm@9.6.6 如果你想查看特定项目的npm包，你可以在项目的根目录下运行以下命令： npm list --depth=0 wuyiwai@ /Users/wuyiwai ├── hexo-render-pug@2.1.4 ├── hexo-renderer-jade@0.4.0 ├── hexo-renderer-pug@3.0.0 ├── hexo-renderer-stylus@1.1.0 └── hexo@7.0.0-rc2 移除npm安装的包 npm remove xx1 xx2 xx3 或者 npm uninstall xx1 xx2 xx3 这里只记录一次简单的npm安装的过程和一些超级常见的命令：\nnpm install -g \u0026lt;package\u0026gt; - 全局安装指定包 npm install \u0026lt;package\u0026gt; 安装指定的包作为当前项目的依赖 npm install / npm update - 安装/更新 当前项目的所有依赖项 npm install \u0026lt;package\u0026gt; / npm update \u0026lt;package\u0026gt; - 安装或更新指定包 npm list - 列出当前项目所有依赖项 npm list -g - 列出全局安装的所有包 npm search \u0026lt;package\u0026gt; - 搜索与指定名称匹配的包 npm show \u0026lt;package\u0026gt; - 显示指定包的详细信息 npm config - 管理npm的配置设置 更多命令可以阅读官方文档：https://docs.npmjs.com/cli/v10/commands\n","date":1722211200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"bbe3d25b618eb72bfd8149c46e088cf2","permalink":"https://wuyiwai.github.io/post/npm%E7%9B%B8%E5%85%B3---%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","publishdate":"2024-07-29T00:00:00Z","relpermalink":"/post/npm%E7%9B%B8%E5%85%B3---%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","section":"post","summary":"记录npm的一些快查命令","tags":["技术","环境配置"],"title":"npm相关 - 安装、常用命令","type":"post"},{"authors":null,"categories":null,"content":"null合并运算符 - ?? 5.6 -\u0026gt; 7.0 新特性 - 官方文档 \u0026lt;?php // NULL 合并运算符的例子 $action = $_POST[\u0026#39;action\u0026#39;] ?? \u0026#39;default\u0026#39;; // 以上例子等同于于以下 if/else 语句 if (isset($_POST[\u0026#39;action\u0026#39;])) { $action = $_POST[\u0026#39;action\u0026#39;]; } else { $action = \u0026#39;default\u0026#39;; } ?\u0026gt; 太空船操作符（组合比较符）- \u0026lt;\u0026gt; 5.6 -\u0026gt; 7.0 新特性 - 官方文档 太空船操作符用于比较两个表达式。当 $a 小于、等于或大于 $b 时它分别返回 -1、0 或 1。比较的原则是沿用 PHP 的 常规比较规则 进行的。 \u0026lt;?php // 整数 echo 1 \u0026lt;=\u0026gt; 1; // 0 echo 1 \u0026lt;=\u0026gt; 2; // -1 echo 2 \u0026lt;=\u0026gt; 1; // 1 // 浮点数 echo 1.5 \u0026lt;=\u0026gt; 1.5; // 0 echo 1.5 \u0026lt;=\u0026gt; 2.5; // -1 echo 2.5 \u0026lt;=\u0026gt; 1.5; // 1 // 字符串 echo \u0026#34;a\u0026#34; \u0026lt;=\u0026gt; \u0026#34;a\u0026#34;; // 0 echo \u0026#34;a\u0026#34; \u0026lt;=\u0026gt; \u0026#34;b\u0026#34;; // -1 echo \u0026#34;b\u0026#34; \u0026lt;=\u0026gt; \u0026#34;a\u0026#34;; // 1 ?\u0026gt; 三元运算符 - ?: 官方文档 \u0026lt;?php // 三元运算符的例子 $action = (empty($_POST[\u0026#39;action\u0026#39;])) ? \u0026#39;default\u0026#39; : $_POST[\u0026#39;action\u0026#39;]; // 以上等同于以下的 if/else 语句 if (empty($_POST[\u0026#39;action\u0026#39;])) { $action = \u0026#39;default\u0026#39;; } else { $action = $_POST[\u0026#39;action\u0026#39;]; } ?\u0026gt; 空合并运算符赋值 - ??= 7.4引入- 官方文档 \u0026lt;?php $array[\u0026#39;key\u0026#39;] ??= computeDefault(); // 等同于以下旧写法 if (!isset($array[\u0026#39;key\u0026#39;])) { $array[\u0026#39;key\u0026#39;] = computeDefault(); } ?\u0026gt; 数组展开操作 7.4引入- 官方文档 \u0026lt;?php $parts = [\u0026#39;apple\u0026#39;, \u0026#39;pear\u0026#39;]; $fruits = [\u0026#39;banana\u0026#39;, \u0026#39;orange\u0026#39;, ...$parts, \u0026#39;watermelon\u0026#39;]; // [\u0026#39;banana\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;pear\u0026#39;, \u0026#39;watermelon\u0026#39;]; ?\u0026gt; Nullsafe 操作符 8.0引入 - 官方文档 自 PHP 8.0.0 起，类属性和方法可以通过 “nullsafe” 操作符访问： ?-\u0026gt;。 除了一处不同，nullsafe 操作符和以上原来的属性、方法访问是一致的： 对象引用解析（dereference）为 null 时不抛出异常，而是返回 null。 并且如果是链式调用中的一部分，剩余链条会直接跳过。 此操作的结果，类似于在每次访问前使用 is_null() 函数判断方法和属性是否存在，但更加简洁。\n\u0026lt;?php // 自 PHP 8.0.0 起可用 $result = $repository?-\u0026gt;getUser(5)?-\u0026gt;name; // 上边那行代码等价于以下代码 if (is_null($repository)) { $result = null; } else { $user = $repository-\u0026gt;getUser(5); if (is_null($user)) { $result = null; } else { $result = $user-\u0026gt;name; } } ?\u0026gt; 注意: 仅当 null 被认为是属性或方法返回的有效和预期的可能值时，才推荐使用 nullsafe 操作符。如果业务中需要明确指示错误，抛出异常会是更好的处理方式。 ","date":1722211200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"200791dffa4689914a5a22fbe4c5fe37","permalink":"https://wuyiwai.github.io/post/php%E6%AF%94%E8%BE%83%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E7%89%B9%E6%80%A7/","publishdate":"2024-07-29T00:00:00Z","relpermalink":"/post/php%E6%AF%94%E8%BE%83%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E7%89%B9%E6%80%A7/","section":"post","summary":"记录PHP比较有意思的特性，不定期更新","tags":["技术","php"],"title":"PHP比较有意思的特性","type":"post"},{"authors":null,"categories":null,"content":"选中变量，高亮显示相同的变量 参考 设置-\u0026gt;编辑器-\u0026gt;配置方案-\u0026gt;常规-\u0026gt;代码 文本光标下的标识符 文本光标下的标识符(写入) tips: 主要是设置这两个的背景色，让其更突出 ","date":1721865600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"3d041b54545a04863f2edf90135c1617","permalink":"https://wuyiwai.github.io/post/jetbrain%E7%B3%BBide%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/","publishdate":"2024-07-25T00:00:00Z","relpermalink":"/post/jetbrain%E7%B3%BBide%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/","section":"post","summary":"记录Jetbrain系IDE的一些配置优化","tags":["技术","IDE"],"title":"Jetbrain系IDE配置优化","type":"post"},{"authors":null,"categories":null,"content":" 由于之前买了多台机子生成了多份ssh密钥，都堆在~/.ssh目录下，太乱了，重新梳理配置下，记录下踩坑\n生成 ssh key 命令: ssh-keygen -t rsa -C \u0026#34;xx@xx.com\u0026#34; 解释: -t rsa 指定 rsa 算法 -C \u0026#34;xx email\u0026#34; 指定 邮箱 注意点：如果生成的过程要用到密码，注意记住密码 如果使用到了密码，在 iterm2 等工具下最好配置一下默认启动的配置加载ssh ~./zshrc 也可以写个简单的 .sh\nset password xxx spawn ssh-add ~/.ssh/example expect \u0026#34;*passphrase for*\u0026#34; send \u0026#34;$password\\r\u0026#34; interact ssh 登录踩坑 在我的mac升级成Sonoma之后，本地的ssh的配置就更新了，默认不支持 ssh-rsa，所以会出现类似Unable to negotiate with port xxx: no matching host key type found. Their offer: ssh-dss,ssh-rsa的报错。\n解决办法:：在 ~/.ssh 目录下的 config 文件中配置\nHost * HostKeyAlgorithms +ssh-rsa PubkeyAcceptedKeyTypes +ssh-rsa 用来支持 rsa\n额外注意: ~/.ssh 目录下有个 known_hosts 和 known_hosts.old 的文件，配置了 config 文件后最好先备份下 known_hosts 的两个文件以防万一，然后删除这两个文件，这样重新使用ssh登录或者验证时会重新生成fingerprint\n或者参考这个 启用通过 HTTPS 的 SSH 连接\n","date":1711843200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"9acb2874a50bdf53bf276cd5944e5b07","permalink":"https://wuyiwai.github.io/post/mac%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AEssh%E4%B8%8D%E6%94%AF%E6%8C%81rsa%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","publishdate":"2024-03-31T00:00:00Z","relpermalink":"/post/mac%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AEssh%E4%B8%8D%E6%94%AF%E6%8C%81rsa%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","section":"post","summary":"mac换电脑后，本地配置SSH不支持RSA的解决办法","tags":["技术","环境配置"],"title":"MAC本地配置SSH不支持RSA的解决办法","type":"post"},{"authors":null,"categories":null,"content":"昨天花了比较多的时间折腾博客，总算完成博客的重建工作了。在博客选型上折腾了很多，最终总结一下。\n博客有静态和动态博客。动态博客有比较方便的后台管理功能，发布比较方便，而且主题非常丰富，用typecho、WordPress等搭建出来的博客网站都非常好看。但需要维护域名、服务器等额外成本，所以暂不考虑了。\n关于静态博客，折腾比较多的是hexo。hexo也有非常多好看的主题，但发布确实是个麻烦。下面列举一下：\n每次写博客要明确markdown的value头，这点会使得markdown文件不是特别的干净，迁移的时候总感觉拖点尾巴，不是很能接受。 类似这样： --- title: swoole tracker研究 date: 2023/12/31 01:00:00 author: wuyiwai tags: - 技术 categories: - 日常 --- 每次写博客都要执行 hexo s类似这样的命令，尽管可以用alias把一连串的命令简化成localblog来本地预览，deployblog来部署博客，但当博客一多的时候每次渲染总算得上是个有点折腾的事情。 图床要各种折腾。尝试过用各种厂商的图床，但都要先上传再复制url。试过结合笔记软件配置图床源，最终才算是解决。 总的来说，hexo确实折腾起来比较麻烦。\n我想写博客主要是确实想写一些有意思的东西，并且希望持续写下去。我看过好多搭建的博客，大多都是折腾了一下，然后就停留在搭建好的几个月或者半年时间里。也有很多博客写的都是我不太关心的内容，通俗上来讲就是质量不高。\n我见过很多优秀的博客，从中得到很多经验。我发现，不管用的是怎么样的技术栈搭建起来的博客，内容好的这些博主，大多数反映出对生活的热爱。他们都比较喜欢记录生活，记录技术，记录一些心路历程。我也希望我的博客如此。\n最终在折腾博客的选型上总算告一段落。最终选用了：Gmeek，一个博客框架，超轻量级个人博客模板。折腾下来有两点好处：\n直接开issue就可以写，写完会自动构建，构建完仓库会有backup的markdown，非常方便 贴图可以直接在issue编辑框拖拽进来，这样可以保证图床全是github的，非常清爽 所以，接下来就好好记录生活吧。\n","date":1711843200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"3f5ac7efac6ebf29cf594e6ccc34d66e","permalink":"https://wuyiwai.github.io/post/%E5%85%B3%E4%BA%8E%E6%8A%98%E8%85%BE%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AE%B0%E5%BD%95/","publishdate":"2024-03-31T00:00:00Z","relpermalink":"/post/%E5%85%B3%E4%BA%8E%E6%8A%98%E8%85%BE%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AE%B0%E5%BD%95/","section":"post","summary":"记录了折腾博客的历程","tags":["博客"],"title":"关于折腾博客的记录","type":"post"},{"authors":null,"categories":null,"content":"新的一轮\n博客 URL 备注 tag 椒盐豆豉 https://blog.douchi.space/#gsc.tab=0 现居美国西雅图女码农。博客内容非常丰富，是个有趣的灵魂 hugo Eliran Turgeman https://www.16elt.com/ 一个英文技术博客，比较原生、简洁 原生 茂茂物语 https://notes.fe-mm.com/ 前端比较好的博客 博客 URL virgilchiou https://virgilchiou.com/ 许愿屋 https://www.zmeee.com/ evan https://www.evan.xin/ bokebo https://bokebo.com/ 轻风记 https://windy.ink/ 云心怀鹤 https://bluehe.cn/ 风未止 https://gorpeln.top/ 时光日志 https://www.timelogs.cn/ poetize https://poetize.cn/ 熊猫不是猫 https://panda995.xyz/evaluation/ ","date":1711843200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"6f7c406c26ea80784a1d7a50092ea655","permalink":"https://wuyiwai.github.io/post/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E9%9D%9E%E5%B8%B8%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%8D%9A%E5%AE%A2/","publishdate":"2024-03-31T00:00:00Z","relpermalink":"/post/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9B%E9%9D%9E%E5%B8%B8%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%8D%9A%E5%AE%A2/","section":"post","summary":"记录一些非常有意思的博客，包括UI好看、内容充实、技术栈有趣等","tags":["博客"],"title":"记录一些非常有意思的博客","type":"post"},{"authors":null,"categories":null,"content":"有趣的网址 FRE123 技术周刊精选推荐 - 非常推荐 数据库优化相关 - Awesome Database Learning 工具 比译 - 便捷的翻译和词典应用 沉浸式翻译 IOS 安卓 AI翻译电子书 - 自制双语电子书 书译 - 助力轻松阅读全球书籍(付费) Dify - 一个LLM应用开发平台 bilibili - 哔哩下载姬downkyi github-chinese - GitHub 汉化插件 ansel - 开源数码照片后期软件，可作为 Adobe Lightroom 平替 Gemini Next Web - 一键免费部署你的私人 Gemini 网页应用。 GeminiProChat - 与 Gemini Pro 聊天的最简 WebUI。 Speechless - 是一个帮助新浪微博用户，把微博内容导出成 PDF 进行本地备份的 Chrome Extension lettura - 开源的RSS阅读器 资源 public-apis - 提供超过 1500 个免费的公共API 算法资源合集 Hello 算法 - 动画图解、一键运行的数据结构与算法教程 代码随想录 - 网站是一套完整的刷题计划 CodeTop - 刷题站 AIGC时代个人生存/摸鱼探索指南-个人使用篇.Dev | Gamma Claude官方提示词工程最佳实践 One-api - 通过标准的 OpenAI API 格式访问所有的大模型，开箱即用 Awesome Database Learning postgres-howtos - 一个作者每天发布一个关于pg的新的\u0026#34;how-to\u0026#34;文章 【工程】服务性能优化入门与实践指南 【Linux】GDB 入门笔记 【Linux】Vim 入门笔记 做个很小众的应用就可以月入数万，为什么多数程序员都不做个人开发？ awesome-product-submission-sites - 独立开发者 - 冷启动 ChatBox支持gemini了 如果你打算全职独立开发，我有一点建议 - 产品潜力 = 10创意 x 设计 x 研发 x 2运营推广 Gemini Pro API已经向企业和开发者开放 Open AI官方推出了提示工程指南 开发路线图 hackernews chatGpt总结中文版 以交互的形式学习git How Does a Database Work? - 实现一个简单的数据库 中文技术文档的写作规范 Ai副业合集 solo - 独立开发者社区 FastGpt - FastGPT 是一个基于 LLM 大语言模型的知识库问答系统，提供开箱即用的数据处理、模型调用等能力。同时可以通过 Flow 可视化进行工作流编排，从而实现复杂的问答场景 FastGPT 是一个基于 LLM 大语言模型的知识库问答系统，提供开箱即用的数据处理、模型调用等能力。同时可以通过 Flow 可视化进行工作流编排，从而实现复杂的问答场景！ 让 ChatGPT 帮我们总结 Hacker News 一个大佬的博客，干活满满 Hello 算法 - 一本非常好的算法书 Photography for geeks - 极客摄影 Just Laws - 一个简洁且便捷的中华人民共和国法律文库 obsidian 文档咖啡豆版 Coroot - Coroot 是一款基于 e BPF 的开源可观测性工具 大厂项目复盘 ChatGPT-Plus - ChatGPT-PLUS 基于 AI 大语言模型 API 实现的 AI 助手全套开源解决方案，自带运营管理后台，开箱即用 build-your-own-x - 这是个很有意思的项目，该存储库是精心编写的分步指南的汇编，用于从头开始重新创建我们最喜欢的技术 开源导航 - 强推，开源推荐集合 OPS/OpenPromptStudio - 这是一个旨在把 AIGC 提示词（现在支持 Midjourney）可视化并提供编辑功能的工具 Redis 开源客户端 tiny-rdm - 一个现代化轻量级的跨平台 Redis 桌面客户端，支持 Mac、Windows 和 Linux。 web-redis-manager Bifrost - 面向生产环境的 MySQL,MariaDB 同步到 Redis,ClickHouse,Elasticsearch 等服务的异构中间件 k8s-tutorial-cn - 作者整理的中文 k8s 教程，适合初学者阅读 LLM可视化 阮一峰周刊工具搜索引擎 - 网友整理了该周刊过去介绍的所有工具软件，做了一个搜索引擎，提供语义搜索。 devv.ai - Devv AI 是面向开发者的新一代 AI 搜索引擎，类似 Bing AI 的使用体验，针对程序员这块做了优化，背后使用的是 GPT3.5 OpenAI Load Balancer：Open AI API 负载均衡 - 它是一个Python库,用于在多个端点之间分配API请求(支持OpenAI和Azure)。它实现了轮询负载平衡机制,并包括每个API调用的指数回退。 PromptPerfect - 专业一流的提示词工程开发工具 ChatGpt深度总结 - 作者结合自己的使用感受，详细介绍了ChatGPT 注册、开通、使用技巧和原理 Google编程风格指南 Generative AI for Beginners - 微软官方AI课程 高并发系统设计40问 OpenAi: GPT 最佳实践中文大白话版本 Easy搞定Golang设计模式 如何制作落地页：保姆级实操指南 穿透Laravel LLM 应用开发实践笔记 - github - 电子书 免费推广自己 SaaS 产品的 66 个网站列表 github - 简单粗暴LaTeX github - system-design-101 - 图解系统设计 github - Free-Certifications - 闲来无事可行考证列表 langchain极简入门课程 AI - Guidance - 微软开源的 LLM 提示编程语言 github相对较全的leetcode项目 文章 向量数据库 向量数据库凉了吗？ 摄影 - 关于人像，从器材到后期，这里都有 手把手教你写技术设计方案 十则产品方法论，助力2024年起飞 DDD技术方案落地实践 如何画出规范的 UML 用例图 独立开发的100个思考： - 看起来挺好，不知道能不能持续更这么多 人体调优指南 PostgreSQL Internals: 3 Things to Know About UPDATE Statements - PostgreSQL 内部：关于 UPDATE 语句的 3 件事 devv.ai 是如何构建高效的 RAG 系统的 Jiayuan (Forrest)慷慨的分享了devv.ai在开发过程中是如何搭建RAG系统的，这个系列的 thread 会分享 http://devv.ai 背后构建整个 Retrieval Augmented Generation System 的经验，包括在生产环境上的一些实践。这是第二部分如何评估一个 RAG 系统。 GitHub 升级 MySQL 8.0 之旅 Database Fundamentals - 数据库基础知识，接下来会尝试去实践一下 如何写好一篇文档 知识库结构讲解 Memory Allocation - 图解内存分配 Load Balancing - 负载均衡 5 Best Practices for Code Reviews - 代码审查的 5 个最佳实践 一次只审查一个功能特性或者错误修复。 提前准备好背景交代（在审查之前写清楚这么做的原因和基本思路）。 利用自动化工具提前做好静态检查，提前统一风格、规范。 利用提问的方式提出改进建议而不是直接喷，如：“我们真的需要这个断言吗？” 仔细阅读代码，慢慢来，以充分理解。 Putting the “You” in CPU - 从 CPU 到操作系统 怎样做出伟大的成就 一个人做什么才能牛逼？答：做自己天赋里有的东西，就是找一些你既有能力又非常感兴趣的事情。 要养成\u0026#34;自驱\u0026#34;的习惯。让\u0026#34;工作\u0026#34;来源于自己的认知，而不是别人告诉你、让你做的事情。主动，而不是等待。 拥有一个属于自己的\u0026#34;项目\u0026#34;是一个找到\u0026#34;自驱\u0026#34;的最佳方法。不断观察自己对什么有强烈的好奇心（甚至好奇到大多数人不能理解）可以找到这样的\u0026#34;项目\u0026#34;。 选定要做的\u0026#34;项目\u0026#34;还应遵循兴奋原则，即：做自己愿意用的产品，写自己想读的故事，而不是执着于满足想象中的不存在的复杂需求。 注重积累效应，日拱一卒、长期积累，每天写一篇文字，一年下来就是一本书。 周期性审视自己做的事情，确认它是否偏离了目标（在做自己最想做的事情），及时修正。 行动的重要性，很多人实际上可以更牛逼，但是因为\u0026#34;谦虚\u0026#34;和\u0026#34;恐惧\u0026#34;导致的拖延使得计划一再搁浅，浪费了时间。 内卷、汉明问题与认知迭代 内卷，指的是在低水平的状态下无实质意义的消耗。这里的「低水平」，可能是客观的，也可能是主观的。 针对主观的低水平状态，我们需要冲破意识层面的障碍，同时把读书、实践和思考结合起来，反复迭代，这样才可能跃升到更高的认知层次上。 而针对客观的低水平状态，唯有认真对待汉明问题，选择好真正重要的人生大方向，才能避免卷入那些无关紧要的、无谓的消耗中去。这才是真正考验大智慧的时候了。 为什么这么多 CLOSE_WAIT tcpdump 解决运维生产中遇到问题 可观测性平台在伴鱼的实践 关于语雀 23 日故障的公告 - 周末回看还是值得看 大规模容器平台共享资源池的预算，分配，核算机制 2023 年值得持续阅读的内容平台 如何提供一个可信的AB测试解决方案 How To Be A Programmer How to be a Programmer 中文版 构建外脑 / 智变时代的个人知识管理 怎样花两年时间去面试一个人 My solopreneur story: zero to $45K/mo in 2 years 原创专栏 - 笔记与写作工具深度测评 关于一罐APP的复盘 对抗软件复杂度的战争 我的工程原理 一个好的设计是你可以在不改变太多代码的情况下改变主意的设计 编写一次性代码来探索问题空间被低估了 可以说\u0026#34;我不知道\u0026#34;或\u0026#34;我需要在得到答案之前进行研究\u0026#34; 提升周围人的技能，而不仅仅是你自己 唯一真正的权威来自知识，而不是来自地位 尊重和耐心对待比你了解得少的人 你的产品是一种资产，但代码是一种负债 AI - 我的AIGC残缺地图:好文推荐 AI Agent的最小实现 AI - 提示词工程指南 AI - 10个prompt engineering技巧图解~ 初创公司首席技术官手册 在 100 天里瘦了 30 斤 书籍 离谱的英语学习指南 微软 - 面向初学者的生成式人工智能课程 - 通过 12 章的课程，开启构建生成式 AI 应用程序之路 Mastering GitHub Copilot for AI Paired Programming - 掌握用于 AI 配对编程的 GitHub Copilot 李笑来 - 人人都能用英语 高并发的哲学原理 - 第一次看到这本书还是在博客上，后面越看越觉得厉害，博客在这 - 岁寒 ","date":1704067200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"c282bec5375b2914b37627a9debe39a7","permalink":"https://wuyiwai.github.io/post/2023%E5%B9%B4%E6%9C%89%E8%B6%A3%E9%A1%B9%E7%9B%AE/","publishdate":"2024-01-01T00:00:00Z","relpermalink":"/post/2023%E5%B9%B4%E6%9C%89%E8%B6%A3%E9%A1%B9%E7%9B%AE/","section":"post","summary":"汇总了2023年的一些有趣的项目","tags":["技术年刊"],"title":"2023年有趣项目","type":"post"},{"authors":null,"categories":null,"content":"时间过得挺快的，一转眼一年就过去了。\n我希望不定期对生活做一些总结，有时间思考一下，恰好年底是个好时候。希望下一次回顾能从这里get到此时的心理活动。\n工作 真要回顾起来的话，在PM这个角色处理的更加游刃有余了，其实项目管理有很多方式很多实践，但本质还是资源协调。继续保持就好了。\n回归到技术本身，其实真深入的研究是不够的，今年想做的事情有好多，swoole tracker、eBPF、SRE等；AIGC大火，负责了AI相关的推进，但说实在的，想做的太多了，做的太少，还需要一步步想清楚当前能做的和最需要做的是什么。\n今年技术层面眼界倒是扩宽了很多，但底层没有跨越式的进步，所以没有提晋升，希望明年能推进做一些实践。\nAIGC 现在其实做AI的其实大体还是分三个大方向：\n大模型的研发、优化，如gpt、gemini、各种开源大模型这些 llm应用的编排调度，如coze等平台，提供了一些低代码配置、调用第三方api、函数配置、prompt编排等功能 各种垂直领域的应用，如midjourney、写信、BI、法律、画图等应用 最好落地，也最容易出效果的我认为是垂直领域的应用，在这类应用又分为两种，一种是用户主动使用的，如copilot等主动使用的场景；一种是融入使用场景的、主动寻找客户的。不管在哪些垂直场景，用户总是要产生用户行为的，在不同的垂直领域的用户行为有不同的意义，如果平台能对用户的行为进行收集并做好预测，能更好的给用户提供更精准的服务，但这同时会消耗大量的token，这里要做一些取舍。我认为在垂直场景应该直接命中用户痛点会更容易落地，用户需要什么、什么可以提效真正帮助用户，用户才愿意使用并为之付费，不然还不如套壳gpt。\n顺带一提，有些人对ai的言论真是很粗浅的。各种ai要取代人类，取代工种、取代这个取代那个；有些公司的负责人宣称自己公司的程序员现在99%的代码都要用gpt写，不能自己写，如果要自己生产要提审批，这是什么水平？又有些言论说gpt这个思考那个思考，这个像人类那个像人类，本质上在工程上还是文本预测、语义理解，工程负责实现各种memory、调度、编排来模拟。说的这么高大上真的很像传销行为。不过还是很坚信ai这块能带来的效率提升还蛮明显的，持续期待。\n生活 过完今年，28了，生活真把我打沉默了。\n家里人都催结婚，朋友圈结婚的也开始多了起来，确实容易感觉到年纪到了。吵架了，很心累。\n今年让我最难受的是突然发现长了白头发，不知道是熬夜还是焦虑还是负面情绪，可能都有吧。\n今年见了好多人，算是生活中为数不多的甜了。今年是希望见到我想见的人，基本都实现了。感情真是奇妙啊，见到他们的时候能回想起来以前一起度过的日子，想到都会发自内心的开心起来。约了想见的朋友几次饭、在上班的路上见到同学、微信上聊第三方的八卦，聊一下未来的规划,说实在的，真感谢他们给我情感上的正向期待。\n今年没看到合适的房子，明年继续看吧。希望看到合适的。今年驾车跑了几次，有点敢开了，明年开多点。\n爷爷奶奶今年的身体好了些，今年花在家里人健康方面的支出变多了许多，有点感触。爷爷奶奶生了2个儿子一个女儿，4个孙子2个外孙，所以在供养上只要教育没问题，相处没问题，那么在赡养意愿和压力上也基本没什么问题。联想到丁克，是否丁克是个人意愿，但从这件事来看，养育子女固然会带来生活压力，但同时也获得了养育的幸福和赡养的一些兜底保障。当然，仍然要自身多努力，把生活过好。\n今年在自我提升上确实做的还可以，明年继续保持吧。在这一年的低沉情绪中，还抱有一些对生活的期待。办了健身卡，也确定在没有加班压力时能很轻易做到一周去四五次健身房；前期通过各种途径下载书到ipad看，但后面发现太麻烦了，我确定我能保持阅读习惯，干脆开了微信阅读会员，真是年度幸福好物；今年能看的电影太少了，一个人看的电影太多了，是个憾事；技术方面的思考比去年多很多，承担了很多技术选型、推动和落地的事情，明年希望能思考的更多些。\n感触 今年的生活体验，真是太难了。很难从生活中获得到幸福感，我能做的只有什么呢？只有麻木的工作、阅读、健身。\n真的很希望2024生活能对我好一点啊。\n","date":1703980800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"def873ebfea3ff5cd90d3b2f84745090","permalink":"https://wuyiwai.github.io/post/2023%E5%B9%B4%E6%9C%AB%E6%80%BB%E7%BB%93/","publishdate":"2023-12-31T00:00:00Z","relpermalink":"/post/2023%E5%B9%B4%E6%9C%AB%E6%80%BB%E7%BB%93/","section":"post","summary":"2023年 - 艰难","tags":["生活","年度总结"],"title":"2023年度总结","type":"post"},{"authors":null,"categories":null,"content":"基础 管理k8s集群工具 kebeadm 配置目录: $HOME/.kube/config 常用命令: 查看配置列表：kubecm list 切换集群:kubecm switch 切换命名空间: kubecm namespace 集群管理 k9s 参考文档: API约定 k8s官方文档 yaml配置 apiVersion: 创建对象使用的 Kubernetes API 版本 参考文档： Which Kubernetes apiVersion Should I Use? segmentfault 常用值 apps/v1: 包含一些通用的应用层的api组合 v1: Kubernetes API的稳定版本，包含很多核心对象：pod、service等 batch/v1beta1: 代表job相关的api组合 kind:创建的对象的类型 常用值 Deployment: 一个定义多副本应用（即多个副本 Pod）的对象 - 参考 HorizontalPodAutoscaler: 自动更新工作负载资源，目的是自动扩缩工作负载以满足需求 - 参考 Ingress: 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP - 参考 Service: 是一种可以访问 Pod逻辑分组的策略 - 参考 CronJob: 创建基于时隔重复调度的Job - 参考 Secret: 是一种包含少量敏感信息例如密码、令牌或密钥的对象 - 参考 metadata： 元数据 - 参考 name: 名称 - 参考 namespace: 命名空间 - 参考 labels: 标签旨在用于指定对用户有意义且相关的对象的标识属性，但不直接对核心系统有语义含义 - 参考 status: 描述了对象的当前状态 - 参考 spec: 包含对象希望达成的状态 - 参考 selector: 供 Pod 所用的标签选择算符。通过此字段选择现有 ReplicaSet 的 Pod 集合， 被选中的 ReplicaSet 将受到这个 Deployment 的影响。此字段必须与 Pod 模板的标签匹配 matchLabels: 对一组资源的标签查询 - 参考 replicas：预期 Pod 的数量。这是一个指针，用于辨别显式零和未指定的值。默认为 1。 - 参考 strategy: 描述如何将现有 Pod 替换为新 Pod type: 部署的类型。默认为 RollingUpdate。常用值如下: RollingUpdate: 滚动更新这些配置参数 Recreate: 重新创建 template: .spec.template 是一个 Pod 模板。 它和 Pod 的语法规则完全相同。 只是这里它是嵌套的，因此不需要 apiVersion 或 `kind spec: nodeSelector: 提供了一种最简单的方法来将 Pod 约束到具有特定标签的节点上 containers: 容器 imagePullPolicy - 参考: 镜像拉取策略， 常用值如下: IfNotPresent: 只有当镜像在本地不存在时才会拉取 Always: 每当 kubelet 启动一个容器时，kubelet 会查询容器的镜像仓库， 将名称解析为一个镜像摘要。 如果 kubelet 有一个容器镜像，并且对应的摘要已在本地缓存，kubelet 就会使用其缓存的镜像； 否则，kubelet 就会使用解析后的摘要拉取镜像，并使用该镜像来启动容器。 Never: Kubelet 不会尝试获取镜像。如果镜像已经以某种方式存在本地， kubelet 会尝试启动容器；否则，会启动失败。 image：镜像 - 参考 command：为Pod中容器设置启动时要执行的命令及其参数 - 参考 lifecycle: pod的生命周期 - 参考 preStop: 如果容器配置了 preStop 回调，则该回调会在容器进入 Terminated 状态之前执行 - 参考 exec: command: env: 定义了一组环境变量 - 参考 volumeMounts: 声明卷在容器中的挂载位置 - 参考 mountPropagation: 卷的挂载传播特性 - 参考, 常用值如下: None: 此卷挂载将不会感知到主机后续在此卷或其任何子目录上执行的挂载变化。 类似的，容器所创建的卷挂载在主机上是不可见的。这是默认模式 HostToContainer: 此卷挂载将会感知到主机后续针对此卷或其任何子目录的挂载操作。换句话说，如果主机在此挂载卷中挂载任何内容，容器将能看到它被挂载在那里 Bidirectional: 这种卷挂载和 HostToContainer 挂载表现相同。 另外，容器创建的卷挂载将被传播回至主机和使用同一卷的所有 Pod 的所有容器 resources: 为容器分配资源 - 参考 requests: 为容器指定内存请求 - 参考 cpu: CPU单位 - 参考 memory: 内存单位 - 参考 ephemeral-storage: 对给定命名空间下的存储资源总量进行限制 - 参考 limits: 为容器限定资源 readinessProbe: 指示容器是否准备好为请求提供服务。如果就绪态探测失败， 端点控制器将从与 Pod 匹配的所有服务的端点列表中删除该 Pod 的 IP 地址。 初始延迟之前的就绪态的状态值默认为 Failure。 如果容器不提供就绪态探针，则默认状态为 Success - 参考。 exec: command: periodSeconds: 指定了 kubelet 每隔 n 秒执行一次存活探测 initialDelaySeconds: 指定 kubelet 在执行第一次探测前应该等待 n 秒 livenessProbe: 指示容器是否正在运行。如果存活态探测失败，则 kubelet 会杀死容器， 并且容器将根据其重启策略决定未来。如果容器不提供存活探针， 则默认状态为 Success - 参考 startupProbe: 指示容器中的应用是否已经启动。如果提供了启动探针，则所有其他探针都会被 禁用，直到此探针成功为止。如果启动探测失败，kubelet 将杀死容器， 而容器依其重启策略进行重启。 如果容器没有提供启动探测，则默认状态为 Success - 参考 securityContext: 为 Pod 设置安全性上下文 - 参考 capabilities: 为容器设置权限 - 参考 allowPrivilegeEscalation - 参考 tolerations: Pod 容忍度，容忍度允许调度器调度带有对应污点的 Pod。 容忍度允许调度但并不保证调度 - 参考 volumes: 卷 hostPath: hostPath 卷能将主机节点文件系统上的文件或目录挂载到你的 Pod 中 - 参考 ","date":1674950400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1743391064,"objectID":"b73ab15ee8e15968d846df81b43261b0","permalink":"https://wuyiwai.github.io/post/k8s-yaml%E8%A7%A3%E6%9E%90/","publishdate":"2023-01-29T00:00:00Z","relpermalink":"/post/k8s-yaml%E8%A7%A3%E6%9E%90/","section":"post","summary":"记录k8s yaml配置相关","tags":["技术","k8s"],"title":"k8s yaml解析","type":"post"}]